---
# tasks file for f5_as3_install

- name: Check BIG IP tmos version >12
  tags:
    - tmos
  uri:
    url: "https://{{ hostvars[groups['adc'][0]]['ansible_host'] }}/mgmt/tm/sys/software/volume"
    method: GET
    force_basic_auth: yes
    user: "{{ e_user}}"
    password: "{{ e_pass }}"
    validate_certs: no
  register: tmos_ver
  delegate_to: localhost

- name: Set fact t_ver (tmos version)
  set_fact:
    t_ver: "{{ item }}"
  loop: "{{ tmos_ver.json | json_query('items[*].version') }}"

- name: Show t_ver 
  debug:
    msg: "PASS "
  when: t_ver is version('12.1', '>=')

- name: Version is not supported
  fail:
    msg: "This version is not supported, only tmos versions >=12.1"
  when: t_ver is version('12.1', '<')

- name: Check if AS3 rpm exist
  stat:
    path: "{{ roles_d }}/f5_as3_install/files/{{ as3RPM }}"
  register: as3_stat

- name: Download rpm sha256 checksum
  get_url:
    url: https://github.com/F5Networks/f5-appsvcs-extension/releases/download/{{ as3Tag }}/{{ as3Sha }}
    dest: "{{ roles_d }}/f5_as3_install/files/{{ as3Sha }}"
  when: as3_stat.stat.exists == False

- name: Register sha256 output for verification
  shell: cat "{{ roles_d }}/f5_as3_install/files/{{ as3Sha }}" |  awk -F " " '{print $1}'
  register: shaSum
  when: as3_stat.stat.exists == False

- name: Download AS3 rpm from F5 Networks
  get_url:
    url: https://github.com/F5Networks/f5-appsvcs-extension/releases/download/{{ as3Tag }}/{{ as3RPM }}
    dest: "{{ roles_d }}/f5_as3_install/files/{{ as3RPM }}"
    checksum: sha256:{{ shaSum.stdout }}
  register: dl_stat
  until: dl_stat.msg.find("OK")  != 1
  retries: 3
  delay: 10
  when: as3_stat.stat.exists == False

- name: Check for 443 open
  wait_for:
    host: "{{ hostvars[groups['adc'][0]]['ansible_host'] }}"
    port: 443
    state: started
    delay: 0
    timeout: 10
  ignore_errors: yes

- name: Generate login token
  tags:
    - token
  uri:
    url: "https://{{ hostvars[groups['adc'][0]]['ansible_host'] }}/mgmt/shared/authn/login"
    method: POST
    body_format: json
    body:
      {
        "username": "{{e_user}}",
        "password": "{{e_pass}}",
        "loginProviderName": "tmos",
      }
    validate_certs: no
  register: Auth_tok
  retries: 4
  delay: 15
  until: Auth_tok.status == 200
  delegate_to: localhost

- name: Check for AS3
  uri:
    url: "https://{{ hostvars[groups['adc'][0]]['ansible_host'] }}/mgmt/shared/appsvcs/info"
    method: GET
    body_format: json
    headers:
      Content-Type: application/json
      X-F5-Auth-Token: "{{ Auth_tok.json.token.token }}"
    validate_certs: no
    status_code: 200,404
  tags: as3check
  register: returnd
  delegate_to: localhost
  ignore_errors: yes

- name: Install AS3
  bigip_iapplx_package:
    package: "{{ roles_d }}/f5_as3_install/files/{{ as3RPM }}"
    provider: "{{ provider }}"
  delegate_to: localhost
  when: returnd.status == 404

- name: Check for 443 open
  wait_for:
    host: "{{ hostvars[groups['adc'][0]]['ansible_host'] }}"
    port: 443
    state: started
    delay: 0
    timeout: 10
  ignore_errors: yes

- name: Check for AS3 after install
  uri:
    url: "https://{{ hostvars[groups['adc'][0]]['ansible_host'] }}/mgmt/shared/appsvcs/info"
    method: GET
    body_format: json
    headers:
      Content-Type: application/json
      X-F5-Auth-Token: "{{ Auth_tok.json.token.token }}"
    validate_certs: no
  tags: as3valid
  register: as3_installd
  delegate_to: localhost
  until: as3_installd.status == 200
  retries: 4
  delay: 15

- file:
    path: "{{ roles_d }}/f5_as3_install/files/{{ item }}"
    state: absent
  with_items:
    - "{{ as3Sha }}"
    - "{{ as3RPM }}"
